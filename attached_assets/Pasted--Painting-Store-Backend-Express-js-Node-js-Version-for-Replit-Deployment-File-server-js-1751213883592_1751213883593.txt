// Painting Store Backend - Express.js & Node.js Version for Replit Deployment

// File: server.js
const express = require('express');
const cors = require('cors');
const multer = require('multer');
const { v4: uuidv4 } = require('uuid');
const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// In-memory data stores (replace with MongoDB or Replit DB later)
const paintings = [];
const cartItems = {}; // sessionId -> array of cart items

// Multer setup for image upload simulation
const storage = multer.memoryStorage();
const upload = multer({ storage });

// Public Endpoints
app.get('/api/paintings', (req, res) => {
    res.json(paintings);
});

app.get('/api/paintings/:id', (req, res) => {
    const painting = paintings.find(p => p.id === req.params.id);
    if (!painting) return res.status(404).send('Not Found');
    res.json(painting);
});

// Cart Endpoints
app.get('/api/cart/:sessionId', (req, res) => {
    res.json(cartItems[req.params.sessionId] || []);
});

app.post('/api/cart', (req, res) => {
    const { sessionId, paintingId, quantity } = req.body;
    if (!sessionId || !paintingId) return res.status(400).send('Missing fields');

    cartItems[sessionId] = cartItems[sessionId] || [];
    cartItems[sessionId].push({ paintingId, quantity });
    res.send('Added to cart');
});

app.delete('/api/cart/:sessionId', (req, res) => {
    delete cartItems[req.params.sessionId];
    res.send('Cart cleared');
});

// Admin Endpoints (basic token protection)
const ADMIN_TOKEN = 'secure-admin-token';

app.post('/api/admin/upload', upload.single('imageFile'), (req, res) => {
    if (req.headers.authorization !== `Bearer ${ADMIN_TOKEN}`)
        return res.status(403).send('Forbidden');

    const { title, description, price, salePrice } = req.body;
    if (!title || !description || !price) return res.status(400).send('Missing fields');

    const painting = {
        id: uuidv4(),
        title,
        description,
        price: parseFloat(price),
        salePrice: salePrice ? parseFloat(salePrice) : null,
        imageUrl: 'https://dummyimage.com/painting.jpg',
        sold: false,
    };

    paintings.push(painting);
    res.send('Painting uploaded');
});

app.post('/api/admin/markSold/:id', (req, res) => {
    if (req.headers.authorization !== `Bearer ${ADMIN_TOKEN}`)
        return res.status(403).send('Forbidden');

    const painting = paintings.find(p => p.id === req.params.id);
    if (!painting) return res.status(404).send('Not Found');

    painting.sold = true;
    res.send('Painting marked as sold');
});

app.listen(PORT, () => console.log(`Painting store backend running on ${PORT}`));

// Secure, Replit-optimized, Express-based backend with session cart, sale logic, admin token protection.
